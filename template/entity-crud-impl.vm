package ${dto.tableCrudServicePackage};

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.umeframework.dora.bean.BeanValidator;
import org.umeframework.dora.transaction.TransactionRequired;
import org.umeframework.dora.service.BaseDBComponent;
import ${dto.classPackage}.${dto.classId};
import ${dto.tableCrudServiceInterfacePackage}.${dto.tableCrudServiceInterface};

/**
 * ${dto.TblName}:${dto.tblId} CRUD service implementation.<br>
 *
 * @author UME-Generator
 */
@org.springframework.stereotype.Service
public class ${dto.tableCrudServiceClass} extends BaseDBComponent implements ${dto.tableCrudServiceInterface} {
#if(${dto.tblHistory} != '')
    /**
     * Enable operation history table automatic insert flag.<br>
     */
    private boolean enableOperationHistory = true;
    /**
     * Disable operation history table automatic insert.<br>
     * 
     * @param enableOperationHistory the enableOperationHistory to set
     */
    public void setEnableOperationHistory(boolean enableOperationHistory) {
        this.enableOperationHistory = enableOperationHistory;
    }
#end

    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public Integer create(${dto.classId} entity) {
        validate(entity);
#if(${dto.tblHistory} != '')
        if (this.enableOperationHistory) {
            // insert modified history
            super.getDao().update(${dto.classId}.SQLID.INSERT_${dto.tblHistory}, entity);
        }
#end
        int result = super.getDao().update(${dto.classId}.SQLID.INSERT, entity);
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public List<Integer> createList(List<${dto.classId}> entityList) {
        List<Integer> result = new ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(this.create(entity));
        }
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public Integer createOrUpdate(${dto.classId} entity) {
        ${dto.classId} existed = super.getDao().queryForObject(${dto.classId}.SQLID.FIND, entity, ${dto.classId}.class);
        if (existed == null) {
            return this.create(entity);
        } else {
            validate(entity);
            return this.update(entity);
        }
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public List<Integer> createOrUpdateList(List<${dto.classId}> entityList) {
        List<Integer> result = new ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(this.createOrUpdate(entity));
        }
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public Integer update(${dto.classId} entity) {
        validate(entity);
#if(${dto.tblHistory} != '')
        if (this.enableOperationHistory) {
            // insert modified history
            super.getDao().update(${dto.classId}.SQLID.UPDATE_${dto.tblHistory}, this.find(entity));
        }
#end
        int result = super.getDao().update(${dto.classId}.SQLID.SMART_UPDATE, entity);
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public List<Integer> updateList(List<${dto.classId}> entityList) {
        List<Integer> result = new ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(this.update(entity));
        }
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public Integer updateFully(${dto.classId} entity) {
        validate(entity);
#if(${dto.tblHistory} != '')
        if (this.enableOperationHistory) {
            // insert modified history
            super.getDao().update(${dto.classId}.SQLID.UPDATE_${dto.tblHistory}, entity);
        }
#end
        int result = super.getDao().update(${dto.classId}.SQLID.UPDATE, entity);
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public List<Integer> updateFullyList(List<${dto.classId}> entityList) {
        List<Integer> result = new ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(this.updateFully(entity));
        }
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public Integer delete(${dto.classId} entity) {
#if(${dto.tblHistory} != '')
        if (this.enableOperationHistory) {
            // insert modified history
            super.getDao().update(${dto.classId}.SQLID.DELETE_${dto.tblHistory}, this.find(entity));
        }
#end
        int result = super.getDao().update(${dto.classId}.SQLID.DELETE, entity);
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    @TransactionRequired
    public List<Integer> deleteList(List<${dto.classId}> entityList) {
        List<Integer> result = new ArrayList<Integer>(entityList.size());
        for (${dto.classId} entity : entityList) {
            result.add(this.delete(entity));
        }
        return result;
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    public ${dto.classId} find(${dto.classId} queryParam) {
        return super.getDao().queryForObject(${dto.classId}.SQLID.FIND, queryParam, ${dto.classId}.class);
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    public List<${dto.classId}> search(${dto.classId} condition) {
        return super.getDao().queryForObjectList(${dto.classId}.SQLID.SEARCH, condition, ${dto.classId}.class);
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    public List<${dto.classId}> likeSearch(Map<String, String> condition) {
        return super.getDao().queryForObjectList(${dto.classId}.SQLID.LIKE_SEARCH, condition, ${dto.classId}.class);
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    public List<${dto.classId}> dynaSearch(Map<String, String> condition) {
        return super.getDao().queryForObjectList(${dto.classId}.SQLID.DYNA_SEARCH, condition, ${dto.classId}.class);
    }
    
    /* (non-Javadoc)
     * 
     * @see ${dto.tableCrudServicePackage}.${dto.tableCrudServiceInterface}
     */
    @Override
    public Integer count(Map<String, String> condition) {
        return super.getDao().count(${dto.classId}.SQLID.COUNT, condition);
    }

    /**
     * Do entity validation before doUpdate
     * 
     * @param entity - Target doUpdate Entity
     */
    protected void validate(${dto.classId} entity) {
        // Here invoke the default entity check logic
        BeanValidator beanValidator = new BeanValidator();
        // Invoke validation rule
        beanValidator.validate(entity);
    }
}
